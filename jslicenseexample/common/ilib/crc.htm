<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title>innovaphone SDK - crc.h</title>
    <!-- Take care to adjust the 3 paths if needed, e. g.: "../../web1/doc" if the file is in the common/interface folder -->
    <link rel="stylesheet" href="../../web1/doc/innovaphone.doc.css" type="text/css" />
    <link rel="stylesheet" href="../../web1/doc/vs.css">
</head>

<body>
    <script src="../../web1/doc/highlight.pack.js"></script>
    <script>hljs.initHighlightingOnLoad();</script>

    <h1>CRC Library</h1>
    <p>
        Cyclic redundancy check (CRC) is a method for calculating checksums that is mainly used in network protocols.
        The following algorithms are supported by the library:
        <ul>
            <li>CRC32</li>
        </ul>
    </p>

    <h2>File information</h2>
    <table style="margin-left:-12px">
        <tr><td><b>File</b></td><td>common/ilib/crc.h<br><br></td></tr>
        <tr>
            <td><b>Classes</b></td>
            <td>
                <a href="#crc">Crc</a><br>
            </td>
        </tr>
        <tr>
            <td><b>Examples</b></td>
            <td>
                <a href="#Example_crc32">Calculating a CRC32 checksum</a><br>
                <br>
            </td>
        </tr>
    </table>

    <h1>Classes</h1>
    <a name="crc"><h2>Crc</h2></a>
    <pre><code class="C++">class Crc {
public:
    static dword crc32(dword crc, const void *buf, int size);
};</code></pre>

    <h3>Overview</h3>
    <p>
        The Crc class defines static functions for calculating checksums.
    </p>

    <h3>Public functions</h3>
    <div class="fnhead">crc32 (static function)</div>
    <dd>
        Calculation of CRC32 checksums. The function can be called multiple times in order to process chunked data.

        <h4>Parameters</h4>
        <table style="margin-left:-12px">
            <tr>
                <td class="param">dword <b>crc</b></td>
                <td>
                    Set to 0 for the first (or only) chunk of data. Set to the last returned value for all subsequent chunks.
                </td>
            </tr>
            <tr>
                <td class="param">const void * <b>buf</b></td>
                <td>
                    The data to be processed.
                </td>
            </tr>
            <tr>
                <td class="param">int <b>size</b></td>
                <td>
                    The number of bytes from buf to be processed.
                </td>
            </tr>
        </table>

        <h4>Return value</h4>
        <table style="margin-left:-12px">
            <tr>
                <td class="param">dword</td>
                <td>
                    The calculated checksum.
                </td>
            </tr>
        </table>
    </dd>
   
    <h1> Code Example </h1>
    <a name="Example_crc32"><h2>Calculating a CRC32 checksum</h2></a>
    <pre class="sample" style="height:100px;"><code style="language-cpp">dword checksum = 0;
checksum = Crc::crc32(checksum, block1, block1_len);
checksum = Crc::crc32(checksum, block2, block2_len);
</code></pre>
</body>
</html>
